
Proyecto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009ae  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006d9  00000000  00000000  00000bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000029e  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000011d  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00001915  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000015e  0000015e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.UART_init 0000002a  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.UART_read 00000012  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.UART_write 0000000e  00000150  00000150  000001c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_write_txt 0000002c  000000e8  000000e8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 00000005  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.main    00000062  00000086  00000086  000000fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
   8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
   c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 43 00 	call	0x86	; 0x86 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000015e <__bad_interrupt>:
 15e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UART_init:

00000114 <UART_init>:
	}
}	

void UART_init(void)
{
	DDRD |= (1<<1);							//PD1	COMO SALIDA TXa
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	82 60       	ori	r24, 0x02	; 2
 118:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<0);						//PD0	COMO ENTRADA RX
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	8e 7f       	andi	r24, 0xFE	; 254
 11e:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = (0<<TXC0)|(0<<U2X0)|(0<<MPCM0);
 120:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
 124:	88 e9       	ldi	r24, 0x98	; 152
 126:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103;							//NO DUPLICA VELOCIDAD 9600B A 160000
 130:	87 e6       	ldi	r24, 0x67	; 103
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 138:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13c:	08 95       	ret

Disassembly of section .text.UART_read:

0000013e <UART_read>:
}

unsigned char UART_read(void)
{
	if(UCSR0A&(1<<7))						//si el bit7 del registro UCSR0A se ha puesto a 1
 13e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	88 23       	and	r24, r24
 144:	1c f4       	brge	.+6      	; 0x14c <UART_read+0xe>
	return UDR0;						//devuelve el dato almacenado en el registro UDR0
 146:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14a:	08 95       	ret
	else
	return 0;
 14c:	80 e0       	ldi	r24, 0x00	; 0
}
 14e:	08 95       	ret

Disassembly of section .text.UART_write:

00000150 <UART_write>:

void UART_write(unsigned char caracter)
{
	while(!(UCSR0A&(1<<5)));				// mientras el registro UDR0 esté lleno espera
 150:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	95 ff       	sbrs	r25, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <UART_write>
	UDR0 = caracter;						//cuando el el registro UDR0 está vacio se envia el caracter
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15c:	08 95       	ret

Disassembly of section .text.UART_write_txt:

000000e8 <UART_write_txt>:
}

void UART_write_txt(const char* cadena)			//cadena de caracteres de tipo char
{
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	6b 01       	movw	r12, r22
  f0:	e8 2e       	mov	r14, r24
	while(*cadena !=0x00)
  f2:	06 c0       	rjmp	.+12     	; 0x100 <UART_write_txt+0x18>
	{
		UART_write(*cadena);				//transmite los caracteres de cadena
  f4:	0e 94 a8 00 	call	0x150	; 0x150 <UART_write>
		cadena++;							//incrementa la ubicación de los caracteres en cadena										//para enviar el siguiente caracter de cadena
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	c8 1a       	sub	r12, r24
  fc:	d8 0a       	sbc	r13, r24
  fe:	e8 0a       	sbc	r14, r24
	UDR0 = caracter;						//cuando el el registro UDR0 está vacio se envia el caracter
}

void UART_write_txt(const char* cadena)			//cadena de caracteres de tipo char
{
	while(*cadena !=0x00)
 100:	f6 01       	movw	r30, r12
 102:	84 91       	lpm	r24, Z
 104:	e7 fc       	sbrc	r14, 7
 106:	80 81       	ld	r24, Z
 108:	81 11       	cpse	r24, r1
 10a:	f4 cf       	rjmp	.-24     	; 0xf4 <UART_write_txt+0xc>
	{
		UART_write(*cadena);				//transmite los caracteres de cadena
		cadena++;							//incrementa la ubicación de los caracteres en cadena										//para enviar el siguiente caracter de cadena
	}
}
 10c:	ef 90       	pop	r14
 10e:	df 90       	pop	r13
 110:	cf 90       	pop	r12
 112:	08 95       	ret

Disassembly of section .text.main:

00000086 <main>:
unsigned char UART_read(void);				// función para la recepción de caracteres
void UART_write(unsigned char);				// función para la transmisión de caracteres
void UART_write_txt(const char* cadena);					// función para la transmisión de cadenas de caracteres

int main(void)
{
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	c4 56       	subi	r28, 0x64	; 100
  90:	d1 09       	sbc	r29, r1
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	f8 94       	cli
  96:	de bf       	out	0x3e, r29	; 62
  98:	0f be       	out	0x3f, r0	; 63
  9a:	cd bf       	out	0x3d, r28	; 61

	DDRD |= (1 << 4) | (1 << 3) | (1 << 2); // Bit 2 3 4 como salida
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8c 61       	ori	r24, 0x1C	; 28
  a0:	8a b9       	out	0x0a, r24	; 10

	UART_init(); // Inicia UART
  a2:	0e 94 8a 00 	call	0x114	; 0x114 <UART_init>
	UART_write_txt("hola");
  a6:	60 e8       	ldi	r22, 0x80	; 128
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_write_txt>
	char data[100];
	int i = 0;
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	10 e0       	ldi	r17, 0x00	; 0
	char REC;
	while (1) // ciclo de escucha del micro
	{
		REC = UART_read();
  b4:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_read>
		if (REC != 0)
  b8:	88 23       	and	r24, r24
  ba:	e1 f3       	breq	.-8      	; 0xb4 <main+0x2e>
		{
			if (REC == '\n')
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	51 f4       	brne	.+20     	; 0xd4 <main+0x4e>
			{
				UART_write_txt(data);
  c0:	be 01       	movw	r22, r28
  c2:	6f 5f       	subi	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_write_txt>
				//manejar datos
				i = 0;
				data[0] = 0;
  cc:	19 82       	std	Y+1, r1	; 0x01
		{
			if (REC == '\n')
			{
				UART_write_txt(data);
				//manejar datos
				i = 0;
  ce:	00 e0       	ldi	r16, 0x00	; 0
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	f0 cf       	rjmp	.-32     	; 0xb4 <main+0x2e>
				data[0] = 0;
			}
			else
			{
				data[i++] = REC;
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e0 0f       	add	r30, r16
  de:	f1 1f       	adc	r31, r17
  e0:	80 83       	st	Z, r24
  e2:	0f 5f       	subi	r16, 0xFF	; 255
  e4:	1f 4f       	sbci	r17, 0xFF	; 255
  e6:	e6 cf       	rjmp	.-52     	; 0xb4 <main+0x2e>
